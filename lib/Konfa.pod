=pod

=encoding utf-8

=head1 NAME

Konfa - Configuration encapsulation

=head1 SYNOPSIS

  package MyKonfa;

  use parent 'Konfa';

  sub env_variable_prefix { 'MY_APP_' }

  sub allowed_variables {
    {
      show_stuff => 'yes',             # You can describe what the variable is for here
      stuff_id   => undef,             # ID of the stuff we're using
      lasers     => 'off',
      tasers     => 'on',
    }
  }

  1;

  # - elsewhere -

  MyKonfa->init_with_env;

  # - use variables -

  use MyKonfa;

  MyKonfa->get('stuff_id');
  MyKonfa->true('show_stuff'); # Bool
  MyKonfa->get('show_stuff');  # String
  MyKonfa->true('nosuchkey');  #  BOOM!

  # - or -

  use MyKonfa vars => 'cfg';

  cfg->stuff_id;
  cfg->is_show_stuff;   # true/false
  cfg->isnt_show_stuff; # false/true
  cfg->nosuchkey;       #  BOOM!


=head1 DESCRIPTION

Konfa is derived from its Ruby namesake, developed by Avidity AB that is
available here:.

Konfa aims to solve some of the common mishaps related to application configration
such as:

=over

=item Bugs attributed to misspelt configuration variable names

=item Forgotten configuration options that nobody knows what they do or where they are used

=item Seamlessly reading configuration values from either the environment or YAML (or any other source for that matter)

=back


=head1 API

=head2 init_with_env

  $config = Konfa->init_with_env;

Initializes configuration with values from the environment. Returns a hashref
with a copy of the values. See L<dump>.

Variables are converted to lower case and stripped of L<env_variable_prefix>
before stored.

=head2 get

  $value = Konfa->get($key);

Returns whatever value is stored for key. Executes and returns
L<on_variable_missing> if the key does not exist.

=head2 true

  $bool = Konfa->true($key);

Just like L<get> but returns C<1> of the value matches any of C<1>, C<yes>,
C<on> or C<true>, otherwise C<0>.

=head2 false

  $bool = Konfa->false($key);

The inverse of L<true>.

=head2 dump

  $hashref = Konfa->dump;

Returns a hashref to a copy of the current configuration values.

=head1 CONFIGURATION METHODS

These methods should be implemented by the configuration class

=head2 allowed_variables

  sub allowed_variables {
    {
      variable => 'default',
      # ...
    }
  }

Should return a hashref of all allowed keys and their defaults. Use C<undef>
if no default value is supplied. Keys not included in this method will cause
initialisation to fail.

=head2 env_variable_prefix

  sub env_variable_prefix { 'MY_PREFIX_' }

Specifies a prefix to scope variables when initialized from the environment.

  sub allowed_variables { { home => '...' }}
  sub env_variable_prefix { 'MY_PREFIX_' }

  # ...

  Konfa->init_from_env;
  Konfa->get('home'); # Returns value of environment variable C<MY_PREFIX_HOME>


=head1 LICENSE

Copyright 2016 - 2017 Gunnar Hansson, Avidity AB, All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut